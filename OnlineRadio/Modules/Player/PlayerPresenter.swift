//
//  PlayerPresenter.swift
//  OnlineRadio
//
//  Created Артём Балашов on 19/01/2019.
//  Copyright © 2019 Артём Балашов. All rights reserved.
//
//  Template generated by Sakhabaev Egor @Banck
//  https://github.com/Banck/Swift-viper-template-for-xcode
//

import UIKit
import AVFoundation
import MediaPlayer
class PlayerPresenter {
    // MARK: - Properties
    weak private var view: PlayerView?
    var interactor: PlayerInteractorInput?
    private let router: PlayerWireframeInterface
    private var stationID: Int!
    private var isPlaying: Bool {
        return player.isPlaying
    }
    private var player = AVPlayer()
    
    // MARK: - Initialization and deinitialization -
    init(interface: PlayerView, interactor: PlayerInteractorInput?, router: PlayerWireframeInterface, stationID: Int) {
        self.stationID = stationID
        self.view = interface
        self.interactor = interactor
        self.router = router
        NotificationCenter.default.addObserver(self, selector: #selector(appDidBecomeActive(_:)), name: UIApplication.didBecomeActiveNotification, object: nil)
    }
    
}

//MARK: - Action
extension PlayerPresenter {
    @objc private func appDidBecomeActive(_ sender: Notification) {
        viewWillAppear()
    }
}

// MARK: - PlayerPresenterInterface -
extension PlayerPresenter: PlayerPresenterInterface {
    func didSelectPlayPauseButton() {
        if isPlaying {
            pause()
        } else {
            play()
        }
    }
    
    func viewDidLoad() {
        do {
            try AVAudioSession.sharedInstance().setCategory(.playback, mode: .default, options: [])
            print("Playback OK")
            try AVAudioSession.sharedInstance().setActive(true)
            print("Session is Active")
            UIApplication.shared.beginReceivingRemoteControlEvents()
            setupCommandCenter()
        } catch {
            print(error)
        }
        view?.displayLoading()
        interactor?.fetchStreamURL(with: stationID)
    }
    
    func viewWillAppear() {
        view?.displayButtonImage(played: isPlaying)
    }
}

//MARK: - Private
extension PlayerPresenter {
    

    
    private func play() {
        view?.displayLoading()
        interactor?.fetchStreamURL(with: stationID)
    }
    
    private func pause() {
        self.player.pause()
        view?.displayButtonImage(played: isPlaying)
    }
}

// MARK: - PlayerInteractorOutput -
extension PlayerPresenter: PlayerInteractorOutput {
    func fetched(with streamURL: String) {
        guard let url = URL( string: streamURL) else {
            return
        }
        let item = AVPlayerItem(url: url)
        player = AVPlayer(playerItem: item)
        player.play()
        view?.displayButtonImage(played: isPlaying)
        
    }
    
    private func setupCommandCenter() {
        MPNowPlayingInfoCenter.default().nowPlayingInfo = [MPMediaItemPropertyTitle: "OnlineRadio"]
        
        let commandCenter = MPRemoteCommandCenter.shared()
        commandCenter.playCommand.isEnabled = true
        commandCenter.pauseCommand.isEnabled = true
        commandCenter.playCommand.addTarget { [weak self] (event) -> MPRemoteCommandHandlerStatus in
            guard let `self` = self else {return .success}
            self.play()
            return .success
        }
        commandCenter.pauseCommand.addTarget { [weak self] (event) -> MPRemoteCommandHandlerStatus in
            guard let `self` = self else {return .success}
            self.pause()
            return .success
        }
    }
    
    func fetched(with error: Error) {
        view?.showAlert(title: nil, message: error.localizedDescription)
    }
    
    func fetchedFully() {
        
    }
    
    
    
    
}

